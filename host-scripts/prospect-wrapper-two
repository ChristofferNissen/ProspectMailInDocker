#!/bin/bash

### Application Configuration
SCRIPT_NAME="prospect-wrapper-two"
LOCAL_COMPUTER_USERNAME=$(whoami)

# Docker config
IMAGE_NAME="stifstof/prospect-mail:latest"
CONTAINER_NAME="prospect-two"
CONFIG_PATH="${HOME}/.config/Prospect_Mail_Two/"





########## Script

PATH=/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
USER=${LOCAL_COMPUTER_USERNAME}

# do we need to use sudo to start docker containers?
(id -Gn | grep -q docker) || SUDO=sudo

USER_UID=$(id -u)
USER_GID=$(id -g)

XSOCK=/tmp/.X11-unix-prospectmailtwo
XAUTH=/tmp/.docker.xauth-prospectmailtwo

DOWNLOAD_DIR=$(xdg-user-dir DOWNLOAD)
if [ -z "${DOWNLOAD_DIR}" ]; then
  DOWNLOAD_DIR="${HOME}/Downloads"
fi

list_commands() {
  echo ""
  echo "Launch prospect-mail using:"
  echo "  prospect-mail                     OR "
  echo "  prospect-wrapper-two prospect-mail"
  echo ""
  exit 1
}

cleanup_stopped_instances() {
  echo "Cleaning up stopped prospect-mail instances..."
  for c in $(${SUDO} docker ps -a -q); do
    image="$(${SUDO} docker inspect -f {{.Config.Image}} ${c})"
    if [ "${image}" == ${IMAGE_NAME} ]; then
      running=$(${SUDO} docker inspect -f {{.State.Running}} ${c})
      if [ "${running}" != "true" ]; then
        ${SUDO} docker rm "${c}" >/dev/null
      fi
    fi
  done
}

prepare_docker_env_parameters() {
  ENV_VARS+=" --env=USER_UID=${USER_UID}"
  ENV_VARS+=" --env=USER_GID=${USER_GID}"
  ENV_VARS+=" --env=DISPLAY=unix$DISPLAY"
  ENV_VARS+=" --env=XAUTHORITY=${XAUTH}"
  ENV_VARS+=" --env=TZ=$(date +%Z)"
}

prepare_docker_volume_parameters() {
  touch ${XAUTH}
  xauth nlist :0 | sed -e 's/^..../ffff/' | xauth -f ${XAUTH} nmerge -

  VOLUMES+=" --volume=${CONFIG_PATH}:/home/${USER}/.config/"
  VOLUMES+=" --volume=${XSOCK}:${XSOCK}"
  VOLUMES+=" --volume=${XAUTH}:${XAUTH}"
  VOLUMES+=" --volume=/run/user/${USER_UID}/pulse:/run/pulse"

  if [ -d "${HOME}/tmp" ]; then
    VOLUMES+=" --volume=${HOME}/tmp:/home/${USER}/tmp"
  fi

}

prepare_docker_device_parameters() {
  # enumerate video devices for webcam support
  VIDEO_DEVICES=
  for device in /dev/video*; do
    if [ -c $device ]; then
      VIDEO_DEVICES="${VIDEO_DEVICES} --device $device:$device"
    fi
  done
}

prog=$(basename $0)
exec=$(which $prog)

if [[ ${prog} == ${SCRIPT_NAME} ]]; then
  case ${1} in
  prospect-mail)
    prog=${1}
    shift
    ;;
  * | help)
    list_commands
    exit 1
    ;;
  esac
elif [[ -n ${exec} ]]; then
  # launch host binary if it exists
  exec ${exec} $@
fi

cleanup_stopped_instances
prepare_docker_env_parameters
prepare_docker_volume_parameters
prepare_docker_device_parameters

set -o xtrace

echo "Starting ${prog}..."
${SUDO} docker run -d \
  --name ${CONTAINER_NAME} \
  --network host \
  --privileged \
  --memory=8g \
  --device /dev/dri \
  --device /dev/snd \
  --cap-add=SYS_ADMIN \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -e DISPLAY=unix$DISPLAY \
  ${ENV_VARS} \
  ${VIDEO_DEVICES} \
  ${VOLUMES} \
  ${EXTRA_DOCKER_ARGUMENTS} \
  ${IMAGE_NAME} ${prog} $@ >/dev/null